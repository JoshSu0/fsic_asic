// This code snippet was auto generated by xls2vlog.py from source file: ./user_project_wrapper.xlsx
// User: patrick
// Date: Jul-19-23



module AXIL_SLAV #( parameter pADDR_WIDTH   = 12,
                    parameter pDATA_WIDTH   = 32
                  )
(
  input  wire                        awready_0,
  input  wire                        arready_0,
  input  wire                        wready_0,
  input  wire                        rvalid_0,
  input  wire  [(pDATA_WIDTH-1) : 0] rdata_0,
  input  wire                        awready_1,
  input  wire                        arready_1,
  input  wire                        wready_1,
  input  wire                        rvalid_1,
  input  wire  [(pDATA_WIDTH-1) : 0] rdata_1,
  input  wire                        awready_2,
  input  wire                        arready_2,
  input  wire                        wready_2,
  input  wire                        rvalid_2,
  input  wire  [(pDATA_WIDTH-1) : 0] rdata_2,
  input  wire                        awready_3,
  input  wire                        arready_3,
  input  wire                        wready_3,
  input  wire                        rvalid_3,
  input  wire  [(pDATA_WIDTH-1) : 0] rdata_3,
  output wire                        awvalid_0,
  output wire  [(pADDR_WIDTH-1) : 0] awaddr,
  output wire                        arvalid_0,
  output wire  [(pADDR_WIDTH-1) : 0] araddr,
  output wire                        Wvalid_0,
  output wire                 [3: 0] wstrb_0,
  output wire  [(pDATA_WIDTH-1) : 0] wdata,
  output wire                        rready,
  output wire                        awvalid_1,
  output wire                        arvalid_1,
  output wire                        wvalid_1,
  output wire                 [3: 0] wstrb_1,
  output wire                        awvalid_2,
  output wire                        arvalid_2,
  output wire                        wvalid_2,
  output wire                 [3: 0] wstrb_2,
  output wire                        awvalid_3,
  output wire                        arvalid_3,
  output wire                        wvalid_3,
  output wire                 [3: 0] wstrb_3,
  input  wire                        axi_awvalid,
  input  wire  [(pADDR_WIDTH-1) : 0] axi_awaddr,
  input  wire                        axi_arvalid,
  input  wire  [(pADDR_WIDTH-1) : 0] axi_araddr,
  input  wire                        axi_wvalid,
  input  wire                 [3: 0] axi_wstrb,
  input  wire  [(pDATA_WIDTH-1) : 0] axi_wdata,
  input  wire                        axi_rready,
  input  wire                        cc_up_enable,
  output wire                        axi_awready,
  output wire                        axi_arready,
  output wire                        axi_wready,
  output wire                        axi_rvalid,
  output wire  [(pDATA_WIDTH-1) : 0] axi_rdata,
  input  wire                        axi_clk,
  input  wire                        axi_reset_n,
  input  wire                 [4: 0] user_prj_sel
);


assign awvalid_0     = 1'b0;
assign awaddr        = {pADDR_WIDTH{1'b0}};
assign arvalid_0     = 1'b0;
assign araddr        = {pADDR_WIDTH{1'b0}};
assign Wvalid_0      = 1'b0;
assign wstrb_0       = 4'b0;
assign wdata         = {pDATA_WIDTH{1'b0}};
assign rready        = 1'b0;
assign awvalid_1     = 1'b0;
assign arvalid_1     = 1'b0;
assign wvalid_1      = 1'b0;
assign wstrb_1       = 4'b0;
assign awvalid_2     = 1'b0;
assign arvalid_2     = 1'b0;
assign wvalid_2      = 1'b0;
assign wstrb_2       = 4'b0;
assign awvalid_3     = 1'b0;
assign arvalid_3     = 1'b0;
assign wvalid_3      = 1'b0;
assign wstrb_3       = 4'b0;
assign axi_awready   = 1'b0;
assign axi_arready   = 1'b0;
assign axi_wready    = 1'b0;
assign axi_rvalid    = 1'b0;
assign axi_rdata     = {pDATA_WIDTH{1'b0}};


endmodule // AXIL_SLAV
